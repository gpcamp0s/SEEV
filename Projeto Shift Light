/*
 Gonçalo Campos- 2222108
 Tiago Martins- 2202737
 IPLEIRIA - Instituto Politécnico de Leiria
 ESTG - Escola Superior de Tecnologia e Gestão
 EAU- Licenciatura em Engenharia Automóvel
 SEEV - Sistemas Elétricos e Eletrónicos de Veículos

 TP1: Instrumentação e simulação de um Shift Light

 LINK: 
 LINK: https://github.com/gpcamp0s/SEEV/blob/main/Projeto%20Shift%20Light
 */

#include "Arduino.h"
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "nvs_flash.h"
#include "esp_task_wdt.h"
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <FastLED.h>

//+++++Constantes Codigo
#define MODO_CONDUCAO_SPORT 1
#define MODO_CONDUCAO_NORMAL 0

#define BARRA_LEDS_RPM_MAX_NORMAL 4700
#define BARRA_LEDS_RPM_MIN_NORMAL 1200
#define BARRA_LEDS_RPM_INICIA_PISCA_NORMAL 5000
#define BARRA_LEDS_RPM_MAX_SPORT 6000
#define BARRA_LEDS_RPM_MIN_SPORT 1500
#define BARRA_LEDS_RPM_INICIA_PISCA_SPORT 6600
#define BARRA_LEDS_ESTADO_OFF 0
#define BARRA_LEDS_ESTADO_ON 1

//+++++Declaracao Funcoes RGB
int calcula_R(int);
int calcula_G(int);
int calcula_B(int);

//+++++Declaração Interrupcoes
static void IRAM_ATTR vInterruptHandler_encoder(void);
static void IRAM_ATTR vInterruptHandler_BTN(void);

//+++++Declaração Tarefas
void vTask_Brain(void *pvParameters);
void vTask_encoder(void *pvParameters);
void vTask_adc(void *pvParameters);
void vTask_display(void *pvParameters);
void vTask_botao(void *pvParameters);

//+++++Declaração Semaforos
SemaphoreHandle_t xCountingSemaphore_encoder_motor;
SemaphoreHandle_t xBinarySemaphore;
SemaphoreHandle_t xSerialMutex;

//+++++Declaração Queues
QueueHandle_t xQueue_rpm = NULL;
QueueHandle_t xQueue_adc = NULL;
QueueHandle_t xQueue_modo_conducao = NULL;

void setup() {
	Serial.begin(115200); // Inicia a comunicação UART

	//Config pinos
	pinMode(17, OUTPUT); // Configura o pino do buzzer como saída

	pinMode(35, INPUT); // Configura o pino do encoder como entrada
	attachInterrupt(digitalPinToInterrupt(35),	&vInterruptHandler_encoder, FALLING);

	pinMode(0, INPUT); // Configura o pino do botão como entrada
	attachInterrupt(digitalPinToInterrupt(0), &vInterruptHandler_BTN,	FALLING);

	//+++++Criacao Semaforos
	xBinarySemaphore = xSemaphoreCreateBinary();  // (0 ou 1)
	xCountingSemaphore_encoder_motor = xSemaphoreCreateCounting(100000, 0); // (máx 100000 pulsos, inicia a 0)
	xSerialMutex = xSemaphoreCreateMutex();

	//++++++Criação Queues
	xQueue_rpm = xQueueCreate(1, sizeof(int));
	xQueue_adc = xQueueCreate(1, sizeof(int));
	xQueue_modo_conducao = xQueueCreate(1, sizeof(char));

	//+++++Criação Tarefas
	xTaskCreatePinnedToCore(vTask_Brain, "Brain", 4096, NULL, 4, NULL, 1);
	xTaskCreatePinnedToCore(vTask_encoder, "Encoder", 4096, NULL, 5, NULL, 1);
	xTaskCreatePinnedToCore(vTask_adc, "ADC", 4096, NULL, 3, NULL, 1);
	xTaskCreatePinnedToCore(vTask_display, "Display", 4096, NULL, 2, NULL, 1);
	xTaskCreatePinnedToCore(vTask_botao, "Botao", 4096, NULL, 6, NULL, 1);
}

void loop() {
	vTaskDelete(NULL); //Tarefa suicida-se p/ passar p/ as outras tarefas.
}

//+++++Criação interrupções
// Interrupção contadora de pulsos para o encoder
static void IRAM_ATTR vInterruptHandler_encoder(void) {
    xSemaphoreGiveFromISR(xCountingSemaphore_encoder_motor, NULL);
}  //Ao chamar xSemaphoreGive..., liberta o semáf, indicando que um novo pulso foi recebido.

// Interrupção para o semáforo binário do botão
static void IRAM_ATTR vInterruptHandler_BTN(void) {
	xSemaphoreGiveFromISR(xBinarySemaphore, NULL);
}  //Liberta o semáf binario, indicando que o botão foi acionado e que deve processar a mudança de modo

//+++++Tasks
//Task Brain-> Ler ADC,RPM,Modo,LDR ; mapeia PWM ; Controlar os LEDs
void vTask_Brain(void *pvParameters) {
	int pwm = 0;
	int adc_b = 0;
	float rpm_b = 0;
	int ldr = 0;
	int num_leds = 0;
	int estado_leds = 0;
	char modo_conducao_b = MODO_CONDUCAO_NORMAL;
	int intensidade = 0;

	//Iniciar motor
	ledcAttachChannel(25, 5000, 8, 5); //(Pino PWM, frequência(hz), resolução(8bits), canalPWM)

	// Inicialização dos LEDs
	CRGB leds[8];  // Cria um array para 8 LEDs
	FastLED.addLeds<WS2812, 15, GRB>(leds, 8); //< LEDs WS2812, pino 15, ordem de cores GRB>
	FastLED.setMaxPowerInVoltsAndMilliamps(5, 500); //(5V, 500mA)
	FastLED.clear(); // Inicia c/ todos os LEDs apagados
	FastLED.show(); // Aplica o estado inicial nos LEDs
	FastLED.setBrightness(255); // Define o brilho inicial

	for (;;) {

		//Controlo do motor (PWM)
		xQueuePeek(xQueue_adc, &adc_b, 0);
		pwm = map(adc_b, 4095, 0, 0, 255);
		ledcWrite(25, pwm); //Escreve para o canal o valor do pwm#####

		//Leitura da RPM de do Modo de condução
		xQueuePeek(xQueue_rpm, &rpm_b, 0);
		xQueuePeek(xQueue_modo_conducao, &modo_conducao_b, 0);

		// Configuração dos limites de RPM e o valor de início de piscar baseado no modo de condução
		int rpm_max, rpm_min, rpm_pisca;
		if (modo_conducao_b == MODO_CONDUCAO_NORMAL) {
			rpm_max = BARRA_LEDS_RPM_MAX_NORMAL;
			rpm_min = BARRA_LEDS_RPM_MIN_NORMAL;
			rpm_pisca = BARRA_LEDS_RPM_INICIA_PISCA_NORMAL;
		} else {
			rpm_max = BARRA_LEDS_RPM_MAX_SPORT;
			rpm_min = BARRA_LEDS_RPM_MIN_SPORT;
			rpm_pisca = BARRA_LEDS_RPM_INICIA_PISCA_SPORT;
		}

		int k = rpm_max / 8;

		//Ajuste do brilho dos leds
		ldr = analogRead(13);
		intensidade = map(ldr, 0, 1023, 10, 255);
		FastLED.setBrightness(intensidade); // Atualiza o brilho dos LEDs com base no valor do LDR

		if (rpm_b > rpm_pisca) { // Caso ultrapasse o limite, inicia pisca
			leds[0] = CRGB(0, 0, 255);
			leds[1] = CRGB(0, 0, 255);
			leds[2] = CRGB(0, 0, 255);
			leds[3] = CRGB(0, 0, 255);   // Todos os LEDs em azul
			leds[4] = CRGB(0, 0, 255);
			leds[5] = CRGB(0, 0, 255);
			leds[6] = CRGB(0, 0, 255);
			leds[7] = CRGB(0, 0, 255);

			tone(17, 2000); //(Pino 17, 2000Hz)
			vTaskDelay(250 / portTICK_PERIOD_MS);
			noTone(17); // Desativa o buzzer
			vTaskDelay(250 / portTICK_PERIOD_MS);

			// Alterna o estado dos LEDs para criar o efeito de piscar
			if (estado_leds == BARRA_LEDS_ESTADO_ON) { //Se os LEDs estiverem ligados
				FastLED.setBrightness(0); // Apaga os LEDs
				FastLED.show(); // Atualiza o estado
				estado_leds = BARRA_LEDS_ESTADO_OFF; // Atualiza o estado para "desligado"
				vTaskDelay(10 / portTICK_PERIOD_MS);
			} else {
				FastLED.setBrightness(intensidade);
				FastLED.show(); // Atualiza o estado
				estado_leds = BARRA_LEDS_ESTADO_ON; // Atualiza o estado para "ligado"
				vTaskDelay(10 / portTICK_PERIOD_MS);
			}
		} else {
			if (rpm_b < rpm_min) { //  Caso o RPM seja menor que o mínimo, apaga os LEDs
				leds[0] = CRGB(0, 0, 0);
				leds[1] = CRGB(0, 0, 0);
				leds[2] = CRGB(0, 0, 0);
				leds[3] = CRGB(0, 0, 0); // Apaga todos os LEDs
				leds[4] = CRGB(0, 0, 0);
				leds[5] = CRGB(0, 0, 0);
				leds[6] = CRGB(0, 0, 0);
				leds[7] = CRGB(0, 0, 0);

			} else { // Caso o RPM esteja dentro do intervalo, calcula quantos LEDs devem acender
				num_leds = rpm_b / k; // Calcula a quantidade de LEDs com base nas RPM
				for (int i = 0; i < num_leds; i++) {
					leds[i] = CRGB(calcula_R(i), calcula_G(i), calcula_B(i)); // Acende LEDs com as cores definida pelas funções
				}
				for (int i = num_leds; i < 8; i++) {
					leds[i] = CRGB(0, 0, 0); // Para não acender os que não são supostos acender
				}
			}
		}
		FastLED.show(); // Atualiza os LEDs

		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}

//Task Encoder-> Calcula RPM com base nos pulsos do encoder
void vTask_encoder(void *pvParameters) {
	int num_pulsos;
	float rpm_e;

	for (;;) {
		//Obtém o num de vezes q o semaf cont foi libertado, sendo que cada libertação corresponde a um pulso
		num_pulsos = uxSemaphoreGetCount(xCountingSemaphore_encoder_motor);
		xQueueReset(xCountingSemaphore_encoder_motor); // Reseta contador p/ próximo período

		// Divide o num de pulsos por 20(num de pulsos por rotação) e multiplica por 600 p/ converter p/ RPM
		rpm_e = ((float) num_pulsos /20)* 600;

		xSemaphoreTake(xSerialMutex, portMAX_DELAY); //Obtem acesso ao semaforo
		Serial.print("RPM: ");
		Serial.println(rpm_e);
		xSemaphoreGive(xSerialMutex); //Devolve o semaforo
		xQueueOverwrite(xQueue_rpm, &rpm_e); // Sobrescreve o valor da RPM na queue p/ ser lido por outras tarefas

		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}

//Task ADC-> Realiza aquisição do sinal analógico.
void vTask_adc(void *pvParameters) {
	int adc_a = 0;

	for (;;) {
		adc_a = analogRead(34); // Lê o valor do pino 34 retornando um valor entre 0 e 4095.

		xSemaphoreTake(xSerialMutex, portMAX_DELAY); //Obtem acesso ao semaforo
		Serial.print("ADC: ");
		Serial.println(adc_a); //Imprime no serial monitor
		xSemaphoreGive(xSerialMutex); //Devolve o semaforo
		xQueueOverwrite(xQueue_adc, &adc_a); // Sobrescreve o de adc na queue

		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}

//Task Display -> Gere o display TFT
void vTask_display(void *pvParameters) {
  Adafruit_ILI9341 tft = Adafruit_ILI9341(5, 27, 23, 18, -1, 19);

  char modo_conducao_d = 0;
  float rpm_d = 0;

  tft.begin();                        // Inicia o display
  tft.fillScreen(ILI9341_BLACK);      // Preenche o ecrã com preto
  tft.setRotation(0);				  // Define a orientação do display

  // Rótulos fixos
  tft.setTextSize(2);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setCursor(10, 10);
  tft.println("    Shift Light");
  tft.setTextSize(2);
  tft.setTextColor(ILI9341_WHITE);
  tft.setCursor(10, 50);
  tft.println("Modo:");
  tft.setCursor(10, 70);
  tft.println("RPM:");

  for (;;) {
    xQueuePeek(xQueue_rpm, &rpm_d, 0);
    xQueuePeek(xQueue_modo_conducao, &modo_conducao_d, 0);

    // Atualiza o valor de RPM
    tft.setTextColor(ILI9341_WHITE, ILI9341_BLACK); //Texto branco, fundo preto
    tft.setCursor(130, 70);
    tft.print("       ");      // Limpa o valor anterior
    tft.setCursor(130, 70);
    tft.print(rpm_d);       // Exibe a RPM atual

    // Atualiza o modo de condução
    tft.setTextColor(ILI9341_WHITE, ILI9341_BLACK);
    tft.setCursor(100, 50);
    tft.print("       ");      // Limpa o modo anterior
    tft.setCursor(100, 50);
    if (modo_conducao_d == MODO_CONDUCAO_NORMAL) {
      tft.print("Normal");
    } else {
      tft.print("Sport");
    }
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

//Task Botao -> Faz a troca dos modos de condução
void vTask_botao(void *pvParameters) {
	char modo_conducao_btn = MODO_CONDUCAO_NORMAL;

	for (;;) {
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY); //Bloqueia a tarefa ate q o semaforo seja libertado
		modo_conducao_btn = !modo_conducao_btn;
		xQueueOverwrite(xQueue_modo_conducao, &modo_conducao_btn);

		vTaskDelay(100 / portTICK_PERIOD_MS);
	}
}

int calcula_R(int i) {
	if (i < 3) {
		return 0;
	}
	if (i < 5) {
		return 255;
	}
	if (i < 8) {
		return 255;
	}
	return 0;
}

int calcula_G(int i) {
	if (i < 3) {
		return 255;
	}
	if (i < 5) {
		return 255;
	}
	return 0;
}

int calcula_B(int i) {
	if (i < 8) {
		return 0;
	}
	return 255;
}
