#include "Arduino.h"
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "nvs_flash.h"
#include "esp_task_wdt.h"
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <FastLED.h>

//++++++++++++++++++++++++++++++++++++++++++++++++Constantes Codigo++++++++++++++++++++++++++++++++++++++++++++++++
#define MODO_CONDUCAO_SPORT 1
#define MODO_CONDUCAO_NORMAL 0
#define PULSES_PER_REV 20
#define RPM_MAXIMO 7000
#define RPM_MINIMO 0
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB
#define NUM_LEDS    8

#define BARRA_LEDS_RPM_MAX_NORMAL 4700
#define BARRA_LEDS_RPM_MIN_NORMAL 1200
#define BARRA_LEDS_RPM_INICIA_PISCA_NORMAL 5000

#define BARRA_LEDS_RPM_MAX_SPORT 6000
#define BARRA_LEDS_RPM_MIN_SPORT 1500
#define BARRA_LEDS_RPM_INICIA_PISCA_SPORT 6600

#define INTENSIDADE_BARRA_LEDS 255
#define BARRA_LEDS_ESTADO_OFF 0
#define BARRA_LEDS_ESTADO_ON 1

#define ADC_SAMPLES 10  // Número de amostras para média

//++++++++++++++++++++++++++++++++++++++++++++++++Constantes Pinos
#define TFT_CS   5
#define TFT_DC   27
#define TFT_MOSI 23
#define TFT_MISO 19
#define TFT_SCLK 18
#define TFT_RST  -1 // Ligar ao 3V3
#define MOTOR_PWM 25  // Terminal de PWM para o motor
#define ADC_PIN   34  // Pinagem para leitura do ADC
#define ENCODER_PIN 35 // Pino de entrada do encoder
#define PINO_BARRA_LEDS    15
#define BTN_PIN 0

//++++++++++++++++++++++++++++++++++++++++++++++++Cabeçalhos Interrupcoes
static void IRAM_ATTR vInterruptHandler_encoder(void);
static void IRAM_ATTR vExampleInterruptHandler_BTN(void);

//++++++++++++++++++++++++++++++++++++++++++++++++Cabeçalhos Tarefas
void vTask_Brain(void *pvParameters);
void vTask_encoder(void *pvParameters);
void vTask_motor(void *pvParameters);
void vTask_adc(void *pvParameters);
void vTask_display(void *pvParameters);
void vTask_botao(void *pvParameters);
void vTask_leds(void *pvParameters);

//++++++++++++++++++++++++++++++++++++++++++++++++Parametros de entrada Tarefas
const char *pcTextFor_Brain = "Brain task is running ";
const char *pcTextFor_Encoder = "Encoder task is running ";
const char *pcTextFor_Motor = "Motor task is running ";
const char *pcTextFor_ADC = "ADC task is running ";
const char *pcTextFor_Display = "Display task is running ";
const char *pcTextFor_Botao = "Botao task is running ";
const char *pcTextFor_LEDS = "LEDS task is running ";

//++++++++++++++++++++++++++++++++++++++++++++++++Cabeçalhos Mutex/Semaforos
SemaphoreHandle_t xMutex_UART; //Serve para controlar a escrita na porta série (Para a tarefa escrever a mensagem completa sem passar para outra)
SemaphoreHandle_t xCountingSemaphore_encoder_motor; // Semáforo contador para gerir pulsos do encoder
SemaphoreHandle_t xBinarySemaphore; // Semáforo binário para sincronizar a interrupção do botão

//++++++++++++++++++++++++++++++++++++++++++++++++Cabeçalhos Queues
QueueHandle_t xQueue_rpm = NULL; // Queue para armazenar o valor de RPM
QueueHandle_t xQueue_pwm = NULL; // Queue para armazenar o valor de PWM.
QueueHandle_t xQueue_adc = NULL; // Queue para armazenar valores do ADC.
QueueHandle_t xQueue_modo_conducao = NULL; // Queue para armazenar o modo de condução

void setup() {
	vTaskPrioritySet(NULL, configMAX_PRIORITIES - 1); //Definir a prioridade tarefa main como a mais alta
	Serial.begin(115200); // Inicia a comunicação UART

	//+++++++++++++++++++++++++++++++++++++++++++++Configs pinos
	pinMode(ENCODER_PIN, INPUT); // Configura o pino do encoder como entrada.
	attachInterrupt(digitalPinToInterrupt(ENCODER_PIN),
			&vInterruptHandler_encoder, FALLING);
	pinMode(BTN_PIN, INPUT); // Configura o pino do botão como entrada.
	attachInterrupt(digitalPinToInterrupt(BTN_PIN),
			&vExampleInterruptHandler_BTN, FALLING);

	//++++++++++++++++++++++++++++++++++++++++++++++Criacao objetos
	char var_aux_verificacao_criacao_objetos = true; // Variável para verificar se os objetos foram criados com sucesso.
	vSemaphoreCreateBinary(xBinarySemaphore); // Cria o semáforo binário.

	xMutex_UART = xSemaphoreCreateMutex();
	if (xMutex_UART == NULL) {
		var_aux_verificacao_criacao_objetos = false;
	}
	xCountingSemaphore_encoder_motor = xSemaphoreCreateCounting(100000, 0); // Máximo de 100000 pulsos
	if (xCountingSemaphore_encoder_motor == NULL) {
		var_aux_verificacao_criacao_objetos = false; // Caso falhe ao criar o semáforo.
	}

	//+++++++++++++++++++++++++++++++++++++++++++++Criação das filas para comunicação entre tarefas
	xQueue_rpm = xQueueCreate(1, sizeof(float)); //(num de posiçoes que a queue vai ter , tipo da variavel)
	if (xQueue_rpm == NULL) {
		var_aux_verificacao_criacao_objetos = false;
	}
	xQueue_pwm = xQueueCreate(1, sizeof(int));
	if (xQueue_pwm == NULL) {
		var_aux_verificacao_criacao_objetos = false;
	}
	xQueue_adc = xQueueCreate(1, sizeof(int));
	if (xQueue_adc == NULL) {
		var_aux_verificacao_criacao_objetos = false;
	}
	xQueue_modo_conducao = xQueueCreate(1, sizeof(char));
	if (xQueue_modo_conducao == NULL) {
		var_aux_verificacao_criacao_objetos = false;
	}

	//++++++++++++++++++++++++++++++++++++++++++++++++Criação Tarefas
	if (var_aux_verificacao_criacao_objetos) {
		 // Criação das tarefas, com respectiva função e prioridade.
		xTaskCreatePinnedToCore(vTask_Brain, "vTask_brain", 2048,
				(void*) pcTextFor_Brain, 4, NULL, 1);
		xTaskCreatePinnedToCore(vTask_encoder, "vTask_encoder", 2048,
				(void*) pcTextFor_Encoder, 5, NULL, 1);
		xTaskCreatePinnedToCore(vTask_motor, "vTask_motor", 1024,
				(void*) pcTextFor_Motor, 3, NULL, 1);
		xTaskCreatePinnedToCore(vTask_adc, "vTask_adc", 2048,
				(void*) pcTextFor_ADC, 3, NULL, 1);
		xTaskCreatePinnedToCore(vTask_display, "vTask_display", 4096,
				(void*) pcTextFor_Display, 2, NULL, 1);
		xTaskCreatePinnedToCore(vTask_botao, "vTask_botao", 1024,
				(void*) pcTextFor_Botao, 6, NULL, 1);
		xTaskCreatePinnedToCore(vTask_leds, "vTask_leds", 4096,
				(void*) pcTextFor_LEDS, 4, NULL, 1);
	}
	interrupts(); //Habilita as interrupçoes
}

void loop() {
	vTaskDelete(NULL); //Tarefa suicida-se para passar para as outras tarefas.
}

//++++++++++++++++++++++++++++++++++++++++++++++++Criação das interrupções
//Interrupcao contadora de pulsos para o encoder
static void IRAM_ATTR vInterruptHandler_encoder(void) {
	static portBASE_TYPE xHigherPriorityTaskWoken; // Indica se uma tarefa de alta prioridade deve ser executada

	xHigherPriorityTaskWoken = pdFALSE; // Inicializa como falso

	xSemaphoreGiveFromISR(xCountingSemaphore_encoder_motor,
			(BaseType_t* )&xHigherPriorityTaskWoken);
	if (xHigherPriorityTaskWoken == pdTRUE) { // Se uma tarefa foi despertada...
		portYIELD_FROM_ISR();// Troca para a tarefa de maior prioridade.
	}
}

//Interrupção para o semaforo binario do botao
static void IRAM_ATTR vExampleInterruptHandler_BTN(void) {
static signed portBASE_TYPE xHigherPriorityTaskWoken; // Indica se uma tarefa de maior prioridade deve ser executada
xHigherPriorityTaskWoken = pdFALSE;
xSemaphoreGiveFromISR(xBinarySemaphore,
		(signed portBASE_TYPE*)&xHigherPriorityTaskWoken);

if (xHigherPriorityTaskWoken == pdTRUE) { // Se uma tarefa foi despertada...
	portYIELD_FROM_ISR(); // Troca para a tarefa de maior prioridade.
	}
}

//++++++++++++++++++++++++++++++++++++++++++++++++Tasks

void vTask_Brain(void *pvParameters) {
	char *pcTaskName; // Ponteiro para armazenar o nome da tarefa
	TickType_t xLastWakeTime; // Variável para armazenar o instante do último "acordar" da tarefa, para controlo periódico.
	pcTaskName = (char*) pvParameters;// Inicia o nome da tarefa com o parâmetro recebido.
	xLastWakeTime = xTaskGetTickCount();

	int pwmValue = 0;
	int adcValue = 0;

	for (;;) {
		xSemaphoreTake(xMutex_UART, portMAX_DELAY); // Utiliza mutex da UART para garantir acesso exclusivo à porta serial.
		{
			Serial.println(pcTaskName); // Envia o nome da tarefa para o Serial monitor
		}
		xSemaphoreGive(xMutex_UART); // Liberta o mutex, permitindo que outras tarefas acedam à UART.

		xQueuePeek(xQueue_adc, &adcValue, 0); // Lê o valor mais recente da fila do ADC sem o remover
		pwmValue = map(adcValue, 0, 4095, 0, 255);
		xQueueOverwrite(xQueue_pwm, &pwmValue); // Escreve por cima do valor atual na queue do PWM com o novo valor calculado

		vTaskDelayUntil(&xLastWakeTime, (100 / portTICK_PERIOD_MS));
	}
}

void vTask_encoder(void *pvParameters) {
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();

	int numero_pulsos_motor1;
	float rpm;
	for (;;) {

		// Obtém a contagem atual de pulsos do encoder a partir do semáforo contador.
		numero_pulsos_motor1 = uxSemaphoreGetCount(xCountingSemaphore_encoder_motor); //Vai buscar a contagem do numero de interrupçoes ocorridas
		 // Reseta a contagem do semáforo para iniciar a contagem de pulsos novamente.
		xQueueReset(xCountingSemaphore_encoder_motor); //Poe a contagem do semaforo a 0

		rpm = (float) ((float) numero_pulsos_motor1 / (float) PULSES_PER_REV) * 600;

		xQueueOverwrite(xQueue_rpm, &rpm); //Escreve para a queue

		xSemaphoreTake(xMutex_UART, portMAX_DELAY);
		{
			Serial.println(pcTaskName);
			Serial.println(rpm);
		}
		xSemaphoreGive(xMutex_UART);

		vTaskDelayUntil(&xLastWakeTime, (100 / portTICK_PERIOD_MS));
	}
}

void vTask_motor(void *pvParameters) {
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();

	int pwmValue = 0;
	int pwm_freq = 5000;
	int pwm_Channel = 5;
	int pwm_resolution = 8;
	ledcAttachChannel(MOTOR_PWM, pwm_freq, pwm_resolution, pwm_Channel);

	for (;;) {
		xSemaphoreTake(xMutex_UART, portMAX_DELAY);
		{
			Serial.println(pcTaskName);
		}
		xSemaphoreGive(xMutex_UART);

		xQueuePeek(xQueue_pwm, &pwmValue, 0); //Espreita o valor do PWM sem o apagar
		ledcWrite(MOTOR_PWM, pwmValue); //Escreve para o canal o valor do pwm
		vTaskDelayUntil(&xLastWakeTime, (100 / portTICK_PERIOD_MS));
	}
}

void vTask_adc(void *pvParameters) {
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();
	int adcValue = 0;

	int adcValues[ADC_SAMPLES];  // Array para armazenar um conjunto de amostras do ADC
	int adcIndex = 0;  // Índice atual do array de amostras (indica onde a próxima leitura será armazenada).
	long sum = 0; // Variável para armazenar a soma das amostras do ADC.

	for (;;) {
		adcValue = analogRead(ADC_PIN); // Lê o valor do pino analógico (entrada do ADC).
        // Armazena a leitura no array de amostras e atualiza o índice para o próximo elemento.
		adcValues[adcIndex] = adcValue;
		adcIndex = (adcIndex + 1) % ADC_SAMPLES; // Garante que o índice fique dentro do intervalo (0 a ADC_SAMPLES - 1).
		sum = 0;

		// Percorre o vetor inteiro, somando todas as amostras.
		for (int i = 0; i < ADC_SAMPLES; i++) {
			sum += adcValues[i];  // Percorre o vetor todo, somando a posições do vetor
		}
		adcValue = (int) sum / ADC_SAMPLES;// Calcula a média das amostras armazenadas no array.

		xSemaphoreTake(xMutex_UART, portMAX_DELAY);
		{
			Serial.println(pcTaskName); //Nome da tarefa
			Serial.println(adcValue); //Valor do ADC
		}
		xSemaphoreGive(xMutex_UART);

		xQueueOverwrite(xQueue_adc, &adcValue);

		vTaskDelayUntil(&xLastWakeTime, (100 / portTICK_PERIOD_MS));
	}
}

void vTask_display(void *pvParameters) {
	Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK,
	TFT_RST, TFT_MISO);
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();

	char currentModo = 0;
	float currentRpm = 0;
	float lastRpm = 0;
	char lastModo = 0;

	tft.begin();
	tft.fillScreen(ILI9341_BLACK);
	tft.setRotation(0);

	 // Rótulos Fixos
	tft.setTextSize(2);
	tft.setTextColor(ILI9341_YELLOW);
	tft.setCursor(10, 10);
	tft.println("    Shift Light");
	tft.setTextSize(2);
	tft.setTextColor(ILI9341_WHITE);
	tft.setCursor(10, 50);
	tft.println("Modo:");
	tft.setCursor(10, 70);
	tft.println("RPM:");
	tft.setTextColor(ILI9341_WHITE, ILI9341_BLACK); // Texto branco, fundo preto
	tft.setCursor(100, 50); // Posição para o valor do modo
	tft.print("       "); // Apaga o valor anterior
	tft.setCursor(100, 50);
	tft.print("Normal"); // Exibe o novo valor

	for (;;) {
		xQueuePeek(xQueue_rpm, &currentRpm, 0);
		xQueuePeek(xQueue_modo_conducao, &currentModo, 0);

		// Atualiza os valores quando há mudança
		if (currentRpm != lastRpm) {
			tft.setTextColor(ILI9341_WHITE, ILI9341_BLACK); // Texto branco, fundo preto
			tft.setCursor(130, 70); // Posição para o valor dos RPM
			tft.print("       "); // Apaga o valor anterior
			tft.setCursor(130, 70);
			tft.print(currentRpm); // Exibe o novo valor
			lastRpm = currentRpm;
		}

		if (currentModo != lastModo) {
			tft.setTextColor(ILI9341_WHITE, ILI9341_BLACK); // Texto branco, fundo preto
			tft.setCursor(100, 50); // Posição para o valor do modo
			tft.print("       "); // Apaga o valor anterior
			tft.setCursor(100, 50);
			if (currentModo == MODO_CONDUCAO_NORMAL) {
				tft.print("Normal"); // Exibe o novo valor

			} else if (currentModo == MODO_CONDUCAO_SPORT) {
				tft.print("Sport"); // Exibe o novo valor

			}
			lastModo = currentModo;
		}
		xSemaphoreTake(xMutex_UART, portMAX_DELAY);
		{
			Serial.println(pcTaskName);
			Serial.println(currentRpm);
		}
		xSemaphoreGive(xMutex_UART);

		vTaskDelayUntil(&xLastWakeTime, (500 / portTICK_PERIOD_MS));
	}
}

void vTask_botao(void *pvParameters) {
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();

	char modo_conducao = MODO_CONDUCAO_NORMAL;

	//SETUP task
	xSemaphoreTake(xBinarySemaphore, 0);

	for (;;) {
		//a tarefa so corre quando ha give do semaforo na interrupcao
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
		modo_conducao = modo_conducao ^ 1;

		xQueueOverwrite(xQueue_modo_conducao, &modo_conducao);

		xSemaphoreTake(xMutex_UART, portMAX_DELAY);
		{
			Serial.println(pcTaskName);
		}
		xSemaphoreGive(xMutex_UART);

		vTaskDelayUntil(&xLastWakeTime, (100 / portTICK_PERIOD_MS));
	}
}

uint8_t calcula_R(uint8_t i) {
	if (i < 3) {
	return 0;
	}
	if (i < 5) {
	return 255;
	}
	if (i < 8) {
	return 255;
	}
	return 0;
}

uint8_t calcula_G(uint8_t i) {
	if (i < 3) {
	return 255;
	}
	if (i < 5) {
	return 255;
	}
	return 0;
}

uint8_t calcula_B(uint8_t i) {
	if (i < 24) {
	return 0;
	}
	return 255;
}

void vTask_leds(void *pvParameters) {
	char *pcTaskName;
	TickType_t xLastWakeTime;
	pcTaskName = (char*) pvParameters;
	xLastWakeTime = xTaskGetTickCount();

	float media_rpm = 0; // Média de RPM lida da queue
	u_int k = (BARRA_LEDS_RPM_MAX_NORMAL - BARRA_LEDS_RPM_MIN_NORMAL) / NUM_LEDS; // Divisão de RPM por número de LEDs

	int num_leds = 0;
	uint8_t funcao_pisca_barra_leds = 0; // Estado atual do pisca
	uint8_t estado_barra_leds_pisca = 0; // Estado do LED (ligado/desligado)
	char modo_conducao_atual, modo_conducao_anterior;
	CRGB leds[NUM_LEDS];// Array que armazena os LEDs controlados pela biblioteca FastLED

	FastLED.addLeds<LED_TYPE, PINO_BARRA_LEDS, COLOR_ORDER>(leds, NUM_LEDS); // Configura o tipo de LED, pino e ordem de cores
	FastLED.setMaxPowerInVoltsAndMilliamps(5, 500);
	FastLED.clear();
	FastLED.show();
	FastLED.setBrightness(INTENSIDADE_BARRA_LEDS);

	for (;;) {

	xQueuePeek(xQueue_rpm, &media_rpm, 0);// Lê a média de RPM da fila
	xQueuePeek(xQueue_modo_conducao, &modo_conducao_atual, 0);  // Lê o modo de condução atual da fila


	if (modo_conducao_atual == MODO_CONDUCAO_NORMAL) { // Configuração para o modo normal.
		u_int k = BARRA_LEDS_RPM_MAX_NORMAL / NUM_LEDS; // Recalcula o fator de RPM por LED.

		if (media_rpm > BARRA_LEDS_RPM_INICIA_PISCA_NORMAL) { // Pisca os LEDs se RPM exceder o limite

			for (int i = 0; i < NUM_LEDS; i++) {
				leds[i] = CRGB(0, 0, 255); // Define todos os LEDs como azuis
			}
			// Alterna entre os estados de ligado/desligado para criar o efeito de piscar.
			if (estado_barra_leds_pisca == BARRA_LEDS_ESTADO_ON) {
				FastLED.setBrightness(0);
				FastLED.show();
				estado_barra_leds_pisca = BARRA_LEDS_ESTADO_OFF;
				vTaskDelayUntil(&xLastWakeTime, (75 / portTICK_PERIOD_MS));
			}
			if (estado_barra_leds_pisca == BARRA_LEDS_ESTADO_OFF) {

				FastLED.setBrightness(INTENSIDADE_BARRA_LEDS);
				FastLED.show();
				estado_barra_leds_pisca = BARRA_LEDS_ESTADO_ON;
				vTaskDelayUntil(&xLastWakeTime, (75 / portTICK_PERIOD_MS));
			}
		} else {// Configuração dos LEDs para RPM dentro do intervalo normal.

			if (media_rpm < BARRA_LEDS_RPM_MIN_NORMAL) { // Se o RPM for muito baixo, apaga todos os LEDs.
				num_leds = 0;
				for (int j = 0; j < NUM_LEDS; j++) {
					leds[j] = CRGB(0, 0, 0); // Apaga os LEDs.
				}
			} else { // Calcula o número de LEDs a serem acesos com base no RPM.
				num_leds = (int) media_rpm / (int) k;
				for (int i = 0; i < num_leds; i++) {
					leds[i] = CRGB(calcula_R(i), calcula_G(i), calcula_B(i)); // Configura LEDs com cores específicas.
				}
				for (int j = num_leds; j < NUM_LEDS; j++) {
					leds[j] = CRGB(0, 0, 0); // Apaga os LEDs restantes.
				}
			}
		}
	} else if (modo_conducao_atual == MODO_CONDUCAO_SPORT) { // Configuração para o modo SPORT
		u_int k = BARRA_LEDS_RPM_MAX_SPORT / NUM_LEDS; // Recalcula a relação RPM/LEDs para o modo SPORT

		if (media_rpm > BARRA_LEDS_RPM_INICIA_PISCA_SPORT) { // Condição para piscar LEDs.

			for (int i = 0; i < NUM_LEDS; i++) {
				leds[i] = CRGB(0, 0, 255); // LEDs em azul
			}
			// Alterna entre os estados de ligado/desligado para o efeito de piscar.
			if (estado_barra_leds_pisca == BARRA_LEDS_ESTADO_ON) {
				FastLED.setBrightness(0);
				FastLED.show();
				estado_barra_leds_pisca = BARRA_LEDS_ESTADO_OFF;
				vTaskDelayUntil(&xLastWakeTime, (75 / portTICK_PERIOD_MS));
			}
			if (estado_barra_leds_pisca == BARRA_LEDS_ESTADO_OFF) {

				FastLED.setBrightness(INTENSIDADE_BARRA_LEDS);
				FastLED.show();
				estado_barra_leds_pisca = BARRA_LEDS_ESTADO_ON;
				vTaskDelayUntil(&xLastWakeTime, (75 / portTICK_PERIOD_MS));
			}

		} else { // Para quando o RPM está abaixo do limite no modo SPORT

			if (media_rpm < BARRA_LEDS_RPM_MIN_SPORT) { // Se o RPM for muito baixo, apaga todos os LEDs.
				num_leds = 0;
				for (int j = 0; j < NUM_LEDS; j++) {
					leds[j] = CRGB(0, 0, 0);
				}
			} else { // Calcula o número de LEDs a serem acesos com base no RPM.
				num_leds = (int) media_rpm / (int) k;
				for (int i = 0; i < num_leds; i++) {
					leds[i] = CRGB(calcula_R(i), calcula_G(i), calcula_B(i));
				}
				for (int j = num_leds; j < NUM_LEDS; j++) {
					leds[j] = CRGB(0, 0, 0); // Apaga LEDs restantes
				}
			}
		}
	}
	FastLED.show(); // Atualiza o estado dos LEDs
	vTaskDelayUntil(&xLastWakeTime, (75 / portTICK_PERIOD_MS));
	}
}
